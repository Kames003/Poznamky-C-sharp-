using System;

class Hlavna
{
    public static void Main()
    {
        // Initializing rec1 properly
        Rectangle rec1 = new Rectangle();
        Rectangle rectangle = new Rectangle(2, 3); // This is the declaring using the constructor

        rec1.length = 2;
        rec1.width = 2;
        System.Console.WriteLine("This is the calculated area: {0}", rec1.Area());

        Student stu = new Student(22, "Marko"); // Creating the object of the Student class
        stu.VypisMa();

        Animal haf = new Animal("Dog", "Woof");

        // Providing the correct number of arguments to the format string
        Console.WriteLine("This is the result from the counter: {0}", Animal.animCounterOfMethod());
        // ! vďaka tomu že animCounterOfMethod je static methoda tak stači použiť classname + nameOfTheMethod 
        haf.makeSound();

        System.Console.WriteLine("This is the result of it {0}", ShapeMath.GetArea("Rectangle",2,2));

    }
}

struct Rectangle
{
    public double length;
    public double width;

    // Constructor
    public Rectangle(double a = default, double b = default)
    {
        length = a;
        width = b;
    }

    public double Area()
    {
        return length * width;
    }
}

class Animal
{
    public string name;
    public string sound;

    public static int animcounter = 0;

    // Default constructor
    public Animal()
    {
        name = "Unknown";
        sound = "No sound";
    }

    // Parameterized constructor
    public Animal(string meno = "No name", string sound = "No sound")
    {
        this.name = meno;
        this.sound = sound;
        animcounter++;
    }

    public void makeSound()
    {
        Console.WriteLine("This is the sound: {0}, and the name: {1}", sound, name);
    }

    public static int animCounterOfMethod()
    {
        return animcounter;
    }
}

class Student
{
    public int id;
    public string name;

    // Parameterized constructor
    public Student(int id, string name)
    {
        this.id = id;
        this.name = name;
    }

    public void VypisMa()
    {
        System.Console.WriteLine("Volam sa {0} a moje id je {1}", name, id);
    }
}

public static class ShapeMath {

public static double GetArea(string shape = "", double dlzka = 0, double dlzka2 = 0 ){

if(String.Equals("Rectangle",shape)){
    return dlzka * dlzka2;

}
else {
    Console.WriteLine("nice one");
    return 0;
}

}



}



--------// ! Public, Priave, Protected? Constants, Read only fields, Constructors, Setters, Getters, Properties and static ------


using System;

class Hlavna
{
    public static void Main(string[] args)
    {
        // Example usage of Animal class
        Animal animal = new Animal("Dog", "Bark");
        animal.makeSound();
        
        Animal anotherAnimal = new Animal("Cat");
        anotherAnimal.Sound = "vv";
        anotherAnimal.makeSound();
        
        Console.WriteLine("Number of Animals: " + Animal.numOfAnimals);
    }

    class Animal
    {
        private string Name; // Can only be changed by methods inside the class
        private string sound; // Private field for sound

        // Readonly field
        public readonly int idNum;

        // Static field to keep track of the number of Animal instances
        private static int numOfAnimalsVar = 0;

        // Property to access and modify the static field
        public static int numOfAnimals
        {
            get { return numOfAnimalsVar; }
            set { numOfAnimalsVar += value; }
        }

        // Constructor chaining
        public Animal() : this("No sound", "No name") { }

        public Animal(string name) : this(name, "No sound") { }

        public Animal(string name, string sound)
        {
            SetterName(name);
            Sound = sound; // Using the property to set the sound
            numOfAnimalsVar++; // Increment the number of Animal instances
        }

        // Setter to protect the Name field
        public void SetterName(string name)
        {
            this.Name = name;
        }

        // Getter for the Name field
        public string GetterName()
        {
            return Name;
        }

        // Property for the Sound field with validation in the setter
        public string Sound
        {
            get { return sound; }
            set
            {
                if (value.Length > 10)
                {
                    sound = "No sound";
                    Console.WriteLine("Too long to be the sound");
                }
                else
                {
                    sound = value;
                }
            }
        }

        // Auto-implemented property with a default value
        public string Owner { get; set; } = "No owner";

        // Method to print the animal's sound
        public void makeSound()
        {
            Console.WriteLine("Name: {0}, Sound: {1}", Name, Sound);
        }
    }
}


-----------// ! Protected, inheritance, Delegates, Super Classes, Polymorphism, Vitrual, Override, Inner classes and more -----------














